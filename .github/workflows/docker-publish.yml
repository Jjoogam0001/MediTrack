name: Docker Build, Test and Publish

on:
  push:
    branches: [ "main", "develop", "feature/*", "fix/*" ]
  pull_request:
    branches: [ "main", "develop" ]
  # Allow manual trigger
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: martin2020i/patient-service
  IMAGE_TAG: latest

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Determine version tag
        id: determine_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"

          # Get the latest tag if it exists
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "Latest tag: $LATEST_TAG"

          # If no tags exist, start with v1.0.0
          if [ -z "$LATEST_TAG" ]; then
            MAJOR=1
            MINOR=0
            PATCH=0
          else
            # Parse the latest tag
            MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')
          fi

          # Determine new version based on branch name
          if [[ $BRANCH_NAME == feature/* ]]; then
            # Major version bump for feature branches
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          elif [[ $BRANCH_NAME == develop ]]; then
            # Minor version bump for develop branch
            MINOR=$((MINOR + 1))
            PATCH=0
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          elif [[ $BRANCH_NAME == fix/* ]]; then
            # Patch version bump for fix branches
            PATCH=$((PATCH + 1))
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          elif [[ $BRANCH_NAME == main ]]; then
            # Use the latest tag for main branch
            VERSION_TAG=$LATEST_TAG
            if [ -z "$VERSION_TAG" ]; then
              VERSION_TAG="v1.0.0"
            fi
          else
            # Default to commit SHA for other branches
            VERSION_TAG="v1.0.0-${GITHUB_SHA::8}"
          fi

          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Determined version tag: $VERSION_TAG"

      - name: Create Git tag
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.determine_version.outputs.version_tag }} -m "Release ${{ steps.determine_version.outputs.version_tag }}"
          git push origin ${{ steps.determine_version.outputs.version_tag }}

      - name: Build and test with Maven
        working-directory: ./patient-service
        run: mvn clean verify

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./patient-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.IMAGE_NAME }}:${{ steps.determine_version.outputs.version_tag }},${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
