name: Docker Build and Publish Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: martin2020i/patient-service
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        working-directory: ./patient-service
        run: ./mvnw clean verify

      - name: Determine version tag
        id: determine-version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version components
          MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.[0-9]+\.[0-9]+/\1/')
          MINOR=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.([0-9]+)\.[0-9]+/\1/')
          PATCH=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.[0-9]+\.([0-9]+)/\1/')
          
          # Determine branch type and increment appropriate version component
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME == feature/* ]]; then
            NEW_TAG="v$((MAJOR+1)).0.0"
            echo "Branch type: feature - incrementing major version"
          elif [[ $BRANCH_NAME == develop ]]; then
            NEW_TAG="v$MAJOR.$((MINOR+1)).0"
            echo "Branch type: develop - incrementing minor version"
          elif [[ $BRANCH_NAME == fix/* ]]; then
            NEW_TAG="v$MAJOR.$MINOR.$((PATCH+1))"
            echo "Branch type: fix - incrementing patch version"
          else
            NEW_TAG="v$MAJOR.$MINOR.$((PATCH+1))"
            echo "Branch type: other - incrementing patch version"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.determine-version.outputs.version }}
          git push origin ${{ steps.determine-version.outputs.version }}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./patient-service
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ steps.determine-version.outputs.version }}
            ${{ env.IMAGE_NAME }}:${{ steps.determine-version.outputs.sha_short }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref={0}:buildcache,mode=max', env.IMAGE_NAME) || '' }}