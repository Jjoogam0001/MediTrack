name: Integration and Unit Tests

on:
  push:
    branches: [ "develop", "feature/*" ]
  pull_request:
    branches: [ "develop", "feature/*", "release/*" ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine version tag
        id: determine_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"

          # Get the latest tag if it exists
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "Latest tag: $LATEST_TAG"

          # If no tags exist, start with v1.0.0
          if [ -z "$LATEST_TAG" ]; then
            MAJOR=1
            MINOR=0
            PATCH=0
          else
            # Parse the latest tag
            MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')
          fi

          # Determine new version based on branch name
          if [[ $BRANCH_NAME == feature/* ]]; then
            # Major version bump for feature branches
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          elif [[ $BRANCH_NAME == develop ]]; then
            # Minor version bump for develop branch
            MINOR=$((MINOR + 1))
            PATCH=0
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          elif [[ $BRANCH_NAME == fix/* ]]; then
            # Patch version bump for fix branches
            PATCH=$((PATCH + 1))
            VERSION_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          else
            # Default to commit SHA for other branches
            VERSION_TAG="v1.0.0-${GITHUB_SHA::8}"
          fi

          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Determined version tag: $VERSION_TAG"

      - name: Create Git tag
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.determine_version.outputs.version_tag }} -m "Release ${{ steps.determine_version.outputs.version_tag }}"
          git push origin ${{ steps.determine_version.outputs.version_tag }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        working-directory: ./patient-service
        run: mvn clean test

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: patient-service/target/surefire-reports/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run integration tests
        working-directory: ./patient-service
        run: mvn failsafe:integration-test failsafe:verify

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: patient-service/target/failsafe-reports/
          retention-days: 7

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Generate test report
        working-directory: ./patient-service
        run: mvn surefire-report:report-only

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: patient-service/target/site/
          retention-days: 7
