name: Integration and Unit Tests Pipeline (GitFlow)

on:
  push:
    branches:
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - develop
      - 'feature/**'
      - 'release/**'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine version tag
        id: determine-version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version components
          MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.[0-9]+\.[0-9]+/\1/')
          MINOR=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.([0-9]+)\.[0-9]+/\1/')
          PATCH=$(echo $LATEST_TAG | sed -E 's/v[0-9]+\.[0-9]+\.([0-9]+)/\1/')
          
          # Determine branch type and increment appropriate version component
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME == feature/* ]]; then
            NEW_TAG="v$((MAJOR+1)).0.0"
            echo "Branch type: feature - incrementing major version"
          elif [[ $BRANCH_NAME == develop ]]; then
            NEW_TAG="v$MAJOR.$((MINOR+1)).0"
            echo "Branch type: develop - incrementing minor version"
          elif [[ $BRANCH_NAME == fix/* ]]; then
            NEW_TAG="v$MAJOR.$MINOR.$((PATCH+1))"
            echo "Branch type: fix - incrementing patch version"
          else
            NEW_TAG="v$MAJOR.$MINOR.$((PATCH+1))"
            echo "Branch type: other - incrementing patch version"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.determine-version.outputs.version }}
          git push origin ${{ steps.determine-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        working-directory: ./patient-service
        run: ./mvnw clean test

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: patient-service/target/surefire-reports/

  integration-tests:
    name: Run Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run integration tests
        working-directory: ./patient-service
        run: ./mvnw failsafe:integration-test failsafe:verify

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: patient-service/target/failsafe-reports/

  test-report:
    name: Generate Test Report
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Download unit test results
        uses: actions/download-artifact@v3
        with:
          name: unit-test-results
          path: patient-service/target/surefire-reports/

      - name: Download integration test results
        uses: actions/download-artifact@v3
        with:
          name: integration-test-results
          path: patient-service/target/failsafe-reports/

      - name: Generate test report
        working-directory: ./patient-service
        run: ./mvnw surefire-report:report-only

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: patient-service/target/site/